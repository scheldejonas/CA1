package client;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;

public class ClientGUI extends javax.swing.JFrame {

    private Client client;
    private ArrayList<String> users;

    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        this.users = new ArrayList<>();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        jListUsers.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        setLocationRelativeTo(null);
    }

    public void addClient(Client client) {
        this.client = client;
        jLabelLoggedInAs.setText("Logged in as: " + client.getName());
    } 
    
    private void sendMessage() throws IOException {
        Runnable r = () -> {
            String msg = jTextFieldMessage.getText();
            if (msg.contains("#")) {
                jTextFieldMessage.setText("");
                return;
            }
            String endMsg = getFinalMessage(msg);
            System.out.println("clientGui.sendMessage: " + endMsg);
            try {
                client.sendMessage(endMsg);
                String format = "";
                if (jListUsers.getSelectedIndex() == 0) {
                    format = client.getName() + ": " + jTextFieldMessage.getText() + System.lineSeparator();
                } else {
                    format = "*P* To " + jListUsers.getSelectedValue() + ": " + jTextFieldMessage.getText() + System.lineSeparator();
                }
                //jTextAreaChat.append(format);
                jTextFieldMessage.setText("");
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        Thread t = new Thread(r);
        t.start();
    }

    private String getFinalMessage(String s) {
        int index = jListUsers.getSelectedIndex();
        if (index == -1) {
            jListUsers.setSelectedIndex(0);
        }
        String receiver = jListUsers.getSelectedValue();
        String msg = "";
        String secretChar = "Â ";
        if (receiver.equals("Everyone")) {
            receiver = "ALL";
            msg = "MSG#" + receiver + "#" + s;
        } else {
            msg = "MSG#" + receiver + "#" + s + secretChar;
        }
        System.out.println("[ClientGUI.getFinalMessage]: " + msg);
        client.setLastMsgSent(msg.replaceAll(secretChar, ""));
        client.setLastPerson(receiver);
        return msg;
    }

    public void readMessage(String receivedMsg) {
        jTextAreaChat.append(receivedMsg);
    }

    public void addUserToList(String s) {
        users.add(s);
        populateUserList();
    }

    public void addUsersToList(ArrayList<String> sArr) {
        for (String s : sArr) {
            users.add(s);
        }
        populateUserList();
    }

    public void populateUserList() {
        jListUsers.removeAll();
        DefaultListModel dlm = new DefaultListModel();
        dlm.addElement("Everyone");
        for (String s : users) {
            dlm.addElement(s);
        }
        jListUsers.setModel(dlm);
        jListUsers.setSelectedIndex(0);
    }

    public void removeUserFromList(String name) {
        users.remove(name);
        populateUserList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneMain = new javax.swing.JScrollPane();
        jTextAreaChat = new javax.swing.JTextArea();
        jScrollPaneUsers = new javax.swing.JScrollPane();
        jListUsers = new javax.swing.JList<>();
        jTextFieldMessage = new javax.swing.JTextField();
        jButtonSend = new javax.swing.JButton();
        jLabelLoggedInAs = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hold Snak 2018");
        setResizable(false);

        jScrollPaneMain.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat Window"));

        jTextAreaChat.setEditable(false);
        jTextAreaChat.setColumns(20);
        jTextAreaChat.setRows(5);
        jScrollPaneMain.setViewportView(jTextAreaChat);
        jTextAreaChat.getAccessibleContext().setAccessibleDescription("");

        jScrollPaneUsers.setBorder(javax.swing.BorderFactory.createTitledBorder("Send To"));
        jScrollPaneUsers.setToolTipText("");

        jListUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListUsers.setSelectedIndex(0);
        jScrollPaneUsers.setViewportView(jListUsers);

        jTextFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMessageKeyPressed(evt);
            }
        });

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jLabelLoggedInAs.setText("Logged in as: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jTextFieldMessage)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(jButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelLoggedInAs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPaneUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLoggedInAs)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldMessage)
                    .addComponent(jButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        try {
            sendMessage();
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jTextFieldMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMessageKeyPressed
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            try {
                sendMessage();
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextFieldMessageKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JLabel jLabelLoggedInAs;
    private javax.swing.JList<String> jListUsers;
    private javax.swing.JScrollPane jScrollPaneMain;
    private javax.swing.JScrollPane jScrollPaneUsers;
    private javax.swing.JTextArea jTextAreaChat;
    private javax.swing.JTextField jTextFieldMessage;
    // End of variables declaration//GEN-END:variables
}
